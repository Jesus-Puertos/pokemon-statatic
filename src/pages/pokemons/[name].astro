---
import type { GetStaticPaths } from "astro";
import MainLayout from "@layouts/MainLayout.astro";
import PokemonCard from "@components/Pokemons/PokemonCard.astro";
import type { PokemonListResponse } from "@interfaces/pokemon-list.responses";
import Titled from "@componentsshared/Titled.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
    const response = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
    const { results } = (await response.json()) as PokemonListResponse;

    return results.map((result) => ({
        params: { name: result.name },
        props: {
            name: result.name,
            url: result.url,
        },
    }));

    // return [
    //     {
    //         params: { name: "bulbasaur" },
    //         props: {
    //             name: "bulbasaur",
    //             url: "https://pokeapi.co/api/v2/pokemon/1/",
    //         },
    //     },
    // ];
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;

const id = url.split("/").at(-2);
const audioSource = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageUrl = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
    title={`Pokémon
 - #${id} ${name}`}
    description={`Informacion del Pokémon ${name}`}
    image={imageUrl}
>
    <section class="mt-10 mx-10 flex flex-col justify-center items-center">
        <div class="flex flex-row">
            <div>
                <!-- <a href="/"> ⬅️ Regresar</a> -->
                <button onclick="history.back()" class="text-blue-500"
                    >⬅️ Regresar</button
                >
                <Titled>Informacion del pokemon</Titled>
                <h1 class="text-3xl capitalize">{name}</h1>
            </div>
            <button
                id="btn-favorite"
                class="ml-4"
                data-name={name}
                data-id={id}
            >
                <Icon data-outline name="heart-outline" size={50} />
                <Icon data-full class="hidden" name="heart-full" size={50} />
            </button>
        </div>

        <PokemonCard name={name} url={url} isBig />

        <audio controls class="mt-5">
            <source src={audioSource} type="audio/ogg" />
            Your browser does not support the audio element.
        </audio>
    </section>
</MainLayout>

<!-- Cliente Scripting -->

<script>
    // interface FavoritePokemon {
    //     name: string;
    //     id: number;
    // }

    import type { FavoritePokemon } from "@interfaces/favorite-pokemon";

    //Ciclo de vida de el ViewTransition
    // document.addEventListener("astro:before-preparation", () => {
    //     console.log("astro:before-preparation");
    // });

    // document.addEventListener("astro:after-preparation", () => {
    //     console.log("astro:after-preparation");
    // });

    // document.addEventListener("astro:before-swap", () => {
    //     console.log("astro:before-swap");
    // });

    // document.addEventListener("astro:after-swap", () => {
    //     console.log("astro:after-swap");
    // });

    // document.addEventListener(
    //     "astro:page-load",
    //     () => {
    //         console.log("Hola");
    //     } /*{ once: true }El ultimo argumento es para que solo se dispare una vez */,
    // );

    const handlePageLoad = () => {
        let favoritePokemons: FavoritePokemon[] = JSON.parse(
            localStorage.getItem("favorites") ?? "[]",
        );

        const $ = (element: string): HTMLElement =>
            document.querySelector(element) as HTMLElement;

        const btnFavorite = $("#btn-favorite");
        if (!btnFavorite) return;

        const name = btnFavorite.dataset.name ?? "";
        const id = btnFavorite.dataset.id ?? "";
        const isFavorite = favoritePokemons.some((fav) => fav.name === name);

        const heartOutline = btnFavorite.querySelector(
            "[data-outline]",
        ) as HTMLElement;

        const heartFull = btnFavorite.querySelector(
            "[data-full]",
        ) as HTMLElement;

        //Verificar si el pokemon esta en favoritos, Hacerlo en una funcion, recordar que por defecto el corazon esta vacio
        if (isFavorite) {
            heartOutline.classList.add("hidden");
            heartFull.classList.remove("hidden");
        }

        const toogleFavorite = () => {
            const isFavorite = favoritePokemons.some(
                (fav) => fav.name === name,
            );
            if (isFavorite) {
                //Remover de favoritos
                favoritePokemons = favoritePokemons.filter(
                    (fav) => fav.name !== name,
                );
            } else {
                //Agregar a favoritos
                favoritePokemons.push({
                    name,
                    id: +id,
                });
            }

            localStorage.setItem("favorites", JSON.stringify(favoritePokemons));
        };

        btnFavorite.addEventListener("click", () => {
            heartOutline.classList.toggle("hidden");
            heartFull.classList.toggle("hidden");
            toogleFavorite();
        });
    };

    document.addEventListener("astro:page-load", handlePageLoad);
</script>

<style>
    a {
        @apply hover:underline text-blue-500;
    }

    #btn-favorite {
        @apply hover:animate-pulse;
    }
</style>
